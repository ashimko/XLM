Create directory dir2
create directory / tmp / foo
Removes ' foo ' file .
Display all files in a folder
List all files / directories under current directory
Display each line in file.txt backwards
Search for .pdf files
find all text files in the current folder
Make directory " / tmp / foo "
Print current date as epoch seconds
find all directories in the current directory
find all the files that are modified in the last 1 day
Find all files whose permission are 777
Counts all lines in $ i file .
Find all 777 permission files / directories under current directory tree
Find all directories that start with stat
Find all files under current directory
List files and directories recursively
Print last 10 commands in history
Find files in the current directory tree whose permissions are 775
Print the contents of " order.txt "
Print your / dir if it ' s empty
Removes empty folder ' symlink ' .
Unzip file " $ empty _ variable "
delete all the normal / regular files in the current folder
display all the jars in the current folder
find all * .java files / directories under current directory
Find all * .java files in the current directory tree
Find all executable files under the current directory and below
find all the files that are modified in the last 1 day
find all of the files that are readable
Find files / directories named ' filename ' in the entire filesystem
find the file with the name " file " in the entire file system
Find symlinks in the current directory tree
Print the full path of executable " lshw "
Print the last 10 commands in history
Prints logged in users in sorted order .
Set 644 permission to all regular files under current directory
Calculate md5 sum of empty string
Delete all regular files under current directory
delete all text files from current folder
display all files expect directories in the current folder
display all files in a folder
display all shell scripts in current folder
find all * .java files / directories under current directory
find all the empty directories in current folder and delete them
Find all files / directories under current directory that are 10MB in size
Find all files in and below all subdirectories of the current directory
Find all regular files in the current directory tree and count them
Find all regular files under $ { S } directory
find all the text files in the current folder
find all the text files in the current folder
Find empty regular files in / dir and its subdirectories
Print a space separated list of numbers from 1 to 10
Search the ' images ' directory tree for regular files
Set 644 permission to all regular files under current directory
ssh into localhost on port 10022
Display only mimetype of myfile.txt , without the filename .
Find all directories starting from / that have permissions 777
Find all empty directories in the current one and delete them
find all files in current folder which are more than 300MB
find all the files that have been changed today
Find the first file / directory in ... directory and quit
Print absolute path of " PATH "
Print the last 10 commands in history
Print the last 10 commands in history
Search the files from the current directory tree for " foo "
Calculate md5 sum of empty string
Combine every two lines of standard input
Compresses all files in a current folder ( not recursively ) .
Counts lines in each * .php file .
Create a symbolic link in the current directory to " $ file "
display all the .sh scripts in the folder / usr
display all regular files in the folder image-folder
find all the files in the current folder which are readable
Find all regular files in current directory and / home / www directory
Find all TXT files that belong to user root
List .log files from the current directory tree
List all .jpg files in the home directory tree
list regular files ending in .mbox
Search directory trees foo and bar for .java files
Search the files from the current directory tree for " foo "
Searches the manual page names and descriptions
Counts lines in each * .php file .
display all the .sh scripts in the folder / usr
Display all files in a folder
display all the regular files in the current folder which have the permission 777
display all regular files in current folder which have spaces in their name
display the count of all the normal / regular files in the current directory
find all the empty in the current folder do not search in sub directories
Find all files / directories under current directory that were modified exactly 30 minutes ago
find all files in the current directory that are less than 1 byte size
Finds all php processes running in system .
find the file " filename.txt " in the usr folder
Forcefully delete all files in the current directory
List all .jpg files in the home directory tree
Print a list of all * .code files from the current directory tree
Print the current directory tree with the date of last modification for each file or directory
Recursively print all files and directories in the current directory tree including hidden files
Rename all .html files to .txt
Saves listing of a current folder in ' var ' variable .
Search the " your / dir " directory for empty subdirectories
Search the bla directory recursively for * .so files
Search the current directory recursively for regular files last modified more than 2 days ago
Search the current directory tree for symbolic links named " link1 "
Search the files from the current directory tree for " foo "
search for all " tif " images in current folder
search for the file , filename.txt in the folder / home
Search the system for the file " testfile.txt " ignoring the case
ssh into " hostname " as user " buck "
ssh into " hostname " as user " buck "
Change the ownership of " file.sh " to " root "
Counts lines in each * .php file .
display all directories in vim folder do not search in sub directories
display all text files in the folder / tmp / 1
display long listing of all the empty files in the current folder
Find all * .rpm files / directories under current directory
Find all files in maximum 2 levels down the current directory
Find all regular files in the current directory tree and count them
Find files / directories named ' photo.jpg ' in the entire filesystem
List all .svn files / directories under current directory
List all .svn files / directories under current directory
List all files in the current directory tree larger than 1000 kb
Recursively change owner of all files in " folder " to " user _ name "
Remount " / system " with read and write permission
Remount " / system " with read and write permission
Remove all directories in and below the current directory
Remove all files and directories called " test " from the current directory tree
Search the system for directories named " needle "
Split " filename " into files of at most 200000 lines each
Find all files / directories owned by user ' michel ' under current directory
Find all files in the current directory recursively that were last modified more than 5 days ago
find all the files in the folder / home which are exactly of size 10MB
Locate all * .mov files in the current directory tree
Remove regular files in the current directory tree
Search the / path directory tree for files matching pattern ' * .foo '
Test if " file.tar.gz " is corrupt
display all file in the home folder except " .c " files
Find all files / directories named ' photoA.jpg ' under current directory tree
Find files / directories named ' somename.txt ' under current directory tree
List all files under current directory with their sizes and paths
Recursively set all permissions under " .. / tools " to 777
Report root file system disk usage human-readable .
search for the file " name _ to _ find " in the home folder
display all file in the home folder except " .c " files
Display machine architecture , ie. x86 _ 64
Enables shell option ' histappend ' .
Find all files / directories that are owned by user ' eric ' under current directory tree
Find all files / directories under current directory tree that belong to the group ' compta '
Find all files / directories with user id 120 under current directory tree
Find all files in and below the home directory that have been modified in the last 90 minutes
Find all files name passwd in the root directory and all its sub-directories .
find all the jpg files in current folder and sort them
find all the perl files in / var / www
Print the file content of command " [ whatever ] "
Remove all regular files from the current directory tree that were modified a day ago
Search the current directory tree for files whose name is " .note " , case insensitive
Count all the lines of all php files in current directory recursively
Delete all files with ' .old ' extension under current directory tree
Find all README ' s in / usr / share
Format the contents of " [ file ] " in a neat table
Format the contents of " [ file ] " in a neat table
Get domain " $ domain " IP address
Prints all business days in a current month .
Remove all files and directories called " test " from the current directory tree
bind " \ C-i " to " complete " function
Enables shell option ' direxpand ' .
find all the " .jpg " files in current folder and display their count
Find all empty directories in the current one and delete them
Find all files / directories under ' / usr ' directory tree that have been modified exactly 5 minutes ago
Find all files under the current directory whose filenames are not " file.txt " , ignoring the case
Find and delete all .zip files in the current directory tree
Find the file whose inode number is 1316256
Modify interval to 0.1 seconds for the watch command
Read a line from standard input and save each word in the bash array variable " arr "
Search the current directory tree for files whose name is " .note " , case insensitive
Delete all files with ' .old ' extension under current directory tree
display all the directories in the current folder which are atleast one level deep
display all the php files in the current folder which do not have the permission 644
Find all * .ps files under $ STARTDIR
Find all regular files that reside in the current directory tree and were last modified more than 5 days ago
find directories in the folder / usr / spool / uucp
List all .jpg files in the home directory tree in a fast way
Locate all files in the current directory and below that have " testfile " in their names
Print common files of directory " 1 " and " 2 "
Print flow of random data , showing all non-printing characters
Prints full path to files with dot in name in a current folder .
Prints what day it was 222 days ago
Puts the job 1 in the background .
Removes all files from current folder but 3 newest ones
Remove the first 7 characters of every line in the output of " history "
Search / usr / local recursively for directories whose names end with a number 0-9
Set permissions to 600 for regular files under media /
Calculate the md5 sum of the list of files in the current directory
Count the number of directories under directory ' / directory / ' non-recursively
find all the files in the current directory that have the word " lib " in them
find all the files in the current directory whose size is equal to exactly 126MB .
Find all files that belongs to group Developer under / home directory
Find regular files in the current directory that are writable by at least somebody
Get second line from text contained in variable $ data .
List all regular files from the current directory tree that were modified less than 60 minutes ago
Print the given file name ' s extensions .
Search the current directory recursively for files containing " needle text "
Search for all .mp3 files in the / mnt / usb directory tree
search in the current folder for the files that begin with " myletter "
Delete all files / directories with node number $ inum under current directory tree
Find all .gz archives in the / path / to / dir directory tree
Find all directories under / directory-path and change their permission to 2755
find all files in the current folder which have not been changed in the last 48 hours
Find all files under media / directory and change their permission to 600
find all the perl files in / var / www ( case insensitive search )
Find and remove the .rhosts file in the / home directory tree
Find every JavaScript file in the wordpress directory
Print a list of unique users who are logged in
Print directories in the the current directory as a list with no report information
Print first field from semicolon-seprated line $ string .
Print the list of regular files from the current directory tree that were modified less than 2 days ago
Print the number of lines for each * .txt file from the $ DIR directory tree
Prints strings with text " texthere " in all files recursively in a current folder .
Read the first line of output from " du -s $ i " into variable " k " in ksh
Remove all files and directories called " test " from the current directory tree
Changes group ownership of ' logdir ' to ' loggroup ' .
Change permission to 755 of all files / directories under current directory tree that have 777 permission
Create a symbolic link named the basename of " $ file " to " $ file "
Delete all directories in the TBD directory that were modified more than 1 day ago
Delete all files in the TBD directory that were modified more than 1 day ago
display the three largest files by size in current folder
Display a binary file as a sequence of hex codes
display all the files in the current folder which have been modified in one hour ago
display all files in the entire file system excluding those that are in the transfer directory
display all the text files and hidden files in the home folder
Display differences between file1 and file2 side-by-side .
Display standard input as a table with " $ { tab } " separators
find all files ending with " js.compiled " in current folder
Find all files in / home / kos and below whose names end in " .tmp "
find all the files in the current folder that are modified after the modification date of a file
List all regular files from the current directory tree that were modified less than 60 minutes ago
List the full path of each directory in the current working directory
remove all the log files which have not been modified in the last 5 days
Remove the passphrase from user ' s ssh key without prompting .
Saves number of lines of current directory listing in ' n _ max ' variable .
Search the current directory recursively for files containing " needle text "
Search the entire file hierarchy for files ending in ' .old ' and delete them .
SSH into " hostname " on port 22 as user " myName "
SSH into " hostname " on port 22 as user " myName "
display all regular / normal files in temp folder and display the filename along with file size
Find all * .cgi files / directories under current directory and change their permission to 755
Find all broken symlinks in maximum 1 level down the $ path directory
find all files that have been used more than two days since their status was last changed
find all the png files in the current folder which begin with the word image
Print ' file ' content , formatting output as 29-symbol wide column
Print the largest 20 files under current directory
return every file that does not have bar somewhere in its full pathname
search for the word text in all the python files in the current folder
use find command to search for .png and .jpg files
Creates temporary file in a TMPDIR folder with name like tmp.XXXXXXXXXX .
display all mp3 files in the file system which have not been accessed in the last 24 hours
Find all directories in maximum 2 levels down the / tmp / test directory
find all text files in current folder and delete all the files that have the word foo in their name
Find out if there are any files on the system owned by user ' account '
List files in " dir1 " that are not in " dir2 "
Print the largest 20 files under current directory
Recursively changes group ownership of everything within a current folder to ' admin ' .
Report file system containing path-to-file disk usage human-readable .
Show the number of lines for each PHP file in the current directory tree
( GNU specific ) Use ' top ' to monitor one process .
Copy the owner and group from " file.txt " to " $ tempfile "
display the three smallest files by size in a folder .
dispaly a long listig of all the files in the current folder which are bigger than 100KB
display all the hidden directories in the directory " / dir / to / search / "
Find all * .cgi ( case insensitive ) files / directories under current directory and change their permission to 755
find all the files in the current directory and search for the word " pw0 " in them .
find all the files starting with " config " in the folder Symfony
List all SGID and SUID files in entire file system
long list the detials of all the shell scripts in current directory
Perform case-insensitive search for file ' TeSt123.txt ' on the system
Print count of unique lines in all files like ' list _ part * '
Remove all .txt files from the / full / path / dir directory tree
Remove all vmware- * .log files / directories under current directory
Archive directory specified by variable " myFolder " to current directory .
Changes group ownership of ' shared ' to ' Workers ' .
Delete all _ _ temp _ _ * files / directories under current directory tree
Expand bash array " myargs " as arguments to " mv "
Find all * .txt files under the current directory whose names are not " File.txt "
Find all .mp3 files with more then 10MB and delete them from root directory .
find all the text files that have modified in the last 2 days and not modified today
Find files in the current directory tree whose names begin with " file " and whose size is 0 , and remove them
Print each line in " set1 " and " set2 " that does not exist in the other
Recursively set all permissions under " / whatever / your / directory / is " to 755
Displays information about all network interfaces in system , including inactive ones .
find all files in the file system which are modified after the file / tmp / checkpoint
Find all regular files named postgis-2.0.0 under current directory
Find all SUID set files under current directory and show a few lines of output from the beginning
Move all files excluding hidden files in " / path / subfolder / " to " / path / "
Remove all * .swp files under current directory ensuring white space safety
Returns 0 if user $ 1 belongs to group $ 2 .
Search all files & directoy from root directory which are greater then 100M and delete them .
Search for ' stuff ' in all * , txt files under current directory
Search for all files in the current directory recursively whose names contain " linkin park " , ignoring the case
search for text files in the current folder which have write access to others
Create a ssh key with no passphrase and store it in " outfile " .
Delete all files ( files , directories , links , pipes ... ) named ' core ' under current directory
display all php , xml and phtml files in current folder
find regular files in the current directory , without descending into sub-directories and display as a null separated list .
Print which files differ in " / tmp / dir1 " and " / tmp / dir2 " recursively
Recursively copy " emptydir " to " destination / newdir "
remote copy all text files from one location to another
Removes only lowest level subfolders from current directory tree ( folders without files and another folders within ) .
Search all directory from / usr downwards for files whose inode number is 1234 and print them .
Search the current directory tree for all regular non-hidden files except * .o
Search the entire file hierarchy for files ending in ' .old ' and delete them .
Create a symbolic link in target directory " ~ / newlinks " to " $ source "
display all files in the folder bar only in the path / foo / bar / myfile ( no output is generated )
Find all * .txt files under the current directory whose names are not " File.txt "
Find all files / directories that are not newer than Jul 01 by modification time
Find recursively all files matching pattern ' file ? ? ' in the xargstest / directory and print a sorted list of them
Get domain name of $ ip and save it to the variable ' reverse '
Read standard input until a null character is found and save the result in variable " f2 "
Remove all .txt files from the / full / path / dir directory tree
Search all files in the current directory tree that are named " whatever " for " whatever "
Search the current directory tree for files whose name is " .note " , case insensitive
Copy a file xyz.c to all the .c files present in the C directory and below
Delete all _ _ temp _ _ * files / directories under current directory tree
display files ending with " .ext " in current folder excluding those that are present in the list list.txt
Find all files / directories under current directory and put the output into full _ backup _ dir variable
find all the files from root folder which have nogroup or noname and dispaly their details .
find all the files starting with " config " in the folder Symfony ( case insensitive search )
Find all files with ' .conf ' extension under ' / etc ' directory tree that have been modified in the last 30 minutes
find all the ogg files in the current directory which have the word " monfichier " in their name
Find files in the current directory tree whose names begin with " file " and whose size is 0 , and remove them
Finds strings like " texthere " recursively in all files of a current folder regarding all symlinks .
Prints long listing of the current directory , sorted from oldest to newest , with appended indicators .
Remove all files named ' junk ' and ' dummy '
Search the current directory recursively for files containing " needle text "
change the permission of all the php files in the folder / var / www / to 700
Change permissions to 644 for all directories under and below / path / to / someDirectory /
Compress regular files in the current directory tree that were last modified more than 7 days ago
Count the number of regular files with case insensitive name pattern $ srchfor under ' teste2 ' directory tree
Create tar archive " foo.tar " and copy all files from directory tree / tmp / a1 to it
display all the files along with their group name in the folder / home which do not belong to the group test
Execute all arguments to a shell script and write the output to console and " $ FILE "
Find all files / directories named modules under current directory and list them twice
Find all files in / tmp whose names begin with the current user ' s name followed by " " .
get year-month-day hour : minute : second from date
Print files created / modified in the last day
Removes all empty folders under path ' / foo / bar ' and the path itself .
Save absolute path of the script filename in variable " MY _ PATH "
search all files in the current folder which match the regular expression
Search all non-hidden files in the current directory and all non-hidden sub-directories for the file hi.dat .
search for the word " foo " in all the regular / normal files in the directory " / path / to / dir "
Add " prefix _ " to every non-blank line in " a.txt "
change the group of all the files in the folder / u / netinst / to staff
Change the ownership of all aluno1 ' s files in the current directory and below to aluno2
display a long listing of all the log files in the current folder which are bigger than 1MB
Find * .jpg screenshots that are bigger than 500k
recursively look for files ending in either .py or .py.server
Search the / Path directory tree for files matching pattern " file _ name * " and containing " bar " in their pathnames
Changes group ownership of ' public ' and ' private ' to ' god ' .
Create 1000 files each file having a number from 1 to 1000 named " file000 " to " file999 "
Create the directory ' .npm-packages ' in the user ' s home directory ( $ HOME )
download contents of a website " http : / / example.com / "
Find all files / directories under minimum 1 level down the $ FOLDER directory and sort them
Print unique lines of sorted file " A.txt " compared to sorted file " B.txt "
Read standard input and replace any repeated characters except spaces with a single instance
Remove all files that end with ' prefs copy ' in their names under ' / mnt / zip ' directory tree
Search the current directory recursively for files containing " needle text "
Search for ' Text To Find ' in all regular files under current directory tree and show the matched files
Search for the string ' magic ' in all regular files under current directory tree and display long listing of them
search for the word " foo " in all the regular / normal files in the directory " / path / to / dir "
split file abc.txt into pieces per 1500000000 bytes named as " abc.NNN "
Strips last section from the path $ pathname , and prints basename of the rest part .
Calculate the md5 sum of the contents of the sorted list of files " $ FILES "
change the owner of all the files in the file system which belong to the user with the uid 999
Copy directory structure from directory ' olddir ' to ' newdir '
Execute ' somecommand ' on each file from the current directory tree with the environment variable f set to the filename
Find all * .mp4 files under / foo / bar and move them to / some / path
Format time string @ 1267619929 according to default time format
List all files / directories under current directory with ' FooBar ' in their names ensuring white space safety
looks for all files larger than 10 megabytes ( 10485760 bytes ) within / home
Print only common strings in content of files ' file1.sorted ' and ' file2.sorted '
Print unique lines of sorted " File 1 " compared with sorted " File 2 "
Print unique lines of sorted file " A.txt " compared to sorted file " B.txt "
recursively look for files ending in either .py or .py.server
Search the current directory tree for files whose names do not end in " .exe " and " .dll "
Split " file.txt " into files of at most 1 MiB in size with a numeric suffix and prefix " file "
change the permissions of all the directories in the folder " / path / to / someDirectory " to 755
change the permissions of all regular / normal files in the current directory , print0 is used for handling files with newlines in their file name
copy all the files with the extension " .type " from one folder to a target directory
( GNU specific ) Display information about number of processes in various states .
Find all files / directories under / non-existent / directory directory with ~ / bin / find
find all the files in the / usr folder that have been modified after the file / usr / FirstFile .
Find all files under current directory and set read-write permission for owner and group and no permission for other for those directories
Join columns in " file1 " and " file2 " if their first field matches and format the output as a table
Print line number of each line in / etc / passwd file , where current user name is found
Print the list of files in the current directory tree excluding those whose paths contain " exclude3 " or " exclude4 "
Search the current directory tree for files whose names do not end in " .exe " and " .dll "
Add the .abc suffix to the names of all * .txt regular files in the current directory tree
Copy all * .data files under / source _ path to / target _ path
Create an archive named newArch from the contents of . / test directory
Create tar archive " dirall.tar " and copy all files from directory tree / tmp / a1 to it
delete all the broken symbolic links from the folder / usr / ports / packages
Find all files / directories under ' / usr / share / doc ' directory tree whose name start with ' README '
Find all fonts ( in ' / usr / local / fonts ' ) that belong to the user ' warwick '
Recursively search for everything under the current directory , displaying human-readable file type description for each entry .
Set timestamp of old _ file.dat to specified timestamp .
Archive directory specified by variable " i " to " / iscsi " preserving relative paths .
display all the html files in the current folder excluding search in the paths . / foo , . / bar .
Finds $ a pattern in a $ b string , and returns exit code 0 if found , suppressing any visible output .
Find all * .mp4 files under / foo / bar and move them to / some / path
Print the names of the directories from the paths expanded by the glob pattern / path / to / directory / *
Removes all files but $ 1 newest ones from current folder .
Archive " myfile " to " / foo / bar / " and create directory " / foo / bar / " if " / foo / " exists
Find all files / directories under $ 1 which have at least read permission for their owner and set read permission for group for these files / directories
Find all files / directories under $ 1 which have at least read permission for their owner and set read permission for group for these files / directories
Mount partition with label " WHITE " on " / mnt / WHITE "
Print the names of the directories from the paths expanded by the glob pattern / path / to / directory / *
Print the names of the directories from the paths expanded by the glob pattern / path / to / directory / *
Saves list of logged in users in system together with ' USER ' header in the ' b ' variable .
SSH into user @ server and run command $ { SSH _ COMMAND }
Change all files with no user under " / var / www " to have owner " root " and group " apache "
Extract any line in sorted file " A " that does not appear in " B " , " C " , or " D "
Find all files / directories with ' .pdf ' extension excluding ' pdfs ' directory and all of its contents
Open gcc info manual and select " option index " menu entry .
Remove the first 13 characters of each " .txt " filename in the " / tmp " directory tree and number the output
Remove the last 3 characters from 987654321 , keeping only 987654
Search for Subscription.java under current directory , and go to directory containing it .
Send 4 ping packets of size 2 to " www.google.com " on a Solaris machine
Set the setup connection timeout to 3 seconds for connecting to " user @ ip " via ssh
Compare files in " / tmp / dir1 " and " / tmp / dir2 " , treating absent files as empty and all files as text
Create a tar file containing all the files in ~ / Library folder that contain spaces in their names
Delete in the background all files in / var / tmp / stuff1 and below that have not been modified in over 90 days
Find all files / directories under $ 1 which have at least execute permission for their owner and set execute permission for group for these files / directories
Find all files / directories under $ 1 which have at least execute permission for their owner and set execute permission for group for these files / directories
Opens gcc info manual and selects " option index " menu entry .
Prints long listing of the current directory and top-level directories within , sorted from oldest to newest , with appended indicators .
Saves calendar of $ month , $ year in the ' cal ' variable .
Search all .java files residing in the current directory tree and modified at least 7 days ago for string " swt "
Search all files in the current directory tree whose names contain " " . for " SearchString "
Find a directory named ' project.images ' case insensitively in the entire filesystem and show it in long listing format
Find all files / directories under / var / www / some / subset and change their owner and group to www-data
Find all files with ' .txt ' extension under ' / home / my _ dir ' dirctory tree and display the number of lines in these files
Prints sizes of all top-level folders in a current folder with human-readable format and descending order .
Recursively search current directory for all files with name ending with " .t1 " , change this to .t2
create a compressed archive " compressFileName.tar.gz " with verbose output
display all the regular / normal files in the / root folder which are bigger than 500MB
find all the files in current folder ending with " ini " and search for a word in all these files
Interactively create a symbolic link in the current directory for " $ SCRIPT _ DIR / $ FILE "
Print details for all files in the . / work directory tree with extension .sh that were modified less than 20 days ago
Search for ' string-to-find ' in all HTML files under current directory tree and show the matched lines with their filenames
ssh into " ssh.myhost.net " as user " myusername " and run command " mkdir -p $ 2 "
Find all .js files in the current directory tree that do not contain a whitespace
Finds all files like " mylog * .log " newer than $ 2 and archives them with bzip2 .
Merge lines from " file _ 1 " and " file _ 2 " and format the output as a table with tab separators
Creates 5-letter random file name and saves it in ' rand _ str ' variable .
display all the files in the current folder which contains form feed ( ^ L ) and does not contain NULL
find all files ending with " js.compiled " in current folder ( print0 is used to handle files with newlines in their names )
Print 1 byte from " / dev / urandom " as a signed decimal value and no address radix
search all jpg images in current folder and rename them
Add cron lists from " filename " to list of cron jobs , giving errors for any lines that cannot be parsed by crontab .
ERROR - need to add -a or -r for recursive copy
Find * .c and * .h files under the current directory tree skipping hidden directories and files
Find all .c and .C files in the current directory tree that contain " main ( " and copy them to directory test1 /
Find all directories under $ x directory and set read-write-execute permission for owner and group and no permission for other for those directories
find all files ending with " js.compiled " in current folder and rename them .
Find all regular files whose names contain a case insensitive pattern composed of space separated positional arguments and display a long listing of them
Find PHP files with abstract classes
Numerically sort file " file.dat " by the second word of each line and output from greatest value to least value
Print the full path of a file under the current working directory with inode number specified on standard input
Recursively changes group ownership of everything within a ' / path / to / repo ' to ' GROUP ' .
Remove duplicates in variable " variable " and preserve the order
Save the directory name of the current bash script to variable " path " if it is found in one of the directories specified by PATH .
search for all the files in the folder / data / images which have been modified after / tmp / start and before / tmp / end
Count the number of open files for PID " $ PYTHONPID " every 2 seconds
Counts number of processors and saves in variable NUMCPU .
Extract all gzip-compressed files from tar archives beginning with ' myfiles _ split.tgz _ * '
Find all * shp * directories under current directory and move their contents to .. / shp _ all /
Set permissions to ug = rw , o = for files inside the . / default / files tree
Create a symbolc link named " public _ html " to " current / app / webroot " under the current working directory
Find all files under and below the current working directory with the word California in the file , and count the number of lines in the output
Join comma-separated data in file1 and file2 , including extra non-matching information in both files .
Mount " nifs " filesystem " / dev / mapper / myldm " on " / mnt " as read only
Move files from $ sourcePath to $ destPath that have not been modified in the last 10 days
Numerically sort file " file.dat " by the second word of each line and output from greatest value to least value
Removes ' / var / lib / mongodb / mongod.lock ' in ' sudo ' mode .
Find all files under and below the current working directory with the word California in the file , and count the number of lines in the output
Run a shell with all environment variables specified in the file ' cronenv ' in the user ' s home directory .
Search for ' birthday ' ( case insensitive ) in all regular files under ~ / Documents directory tree and show only the filenames
display all the files in the current folder excluding those that are present in the sub directory aa and display those files that start with the word " file "
Find all directories under minimum 1 level down the current directory excluding directories ( along with their contents ) that start with a . ( dot ) in their names
Make directories to " directory { 1 .. 3 } / subdirectory { 1 .. 3 } / subsubdirectory { 1 .. 2 } " as needed
download content from " http : / / example.com / textfile.txt " and output to " textfile.txt "
Execute command " $ cmd _ str " on host " $ SERVER " as user " $ USER "
Process each file beginning with " file " in the current directory as an argument to " bash script.sh "
Save a space separated list of process ids of currently running jobs to variable ' bgxjobs '
Silently read $ char number of symbols from file descriptor 4 , without backslash escaping , and store received input in ' line ' variable
Sort all files / directories under current directory according to modification time and print only the recent 7 of them
Archive " foo / bar / baz.c " to " remote : / tmp / " preserving the relative path of " foo / bar / baz.c "
Create a symbolic link named " .profile " to " git-stuff / home / profile " without dereferencing " .profile "
Find all files under and below the current working directory with the word California in the file ( case insensitive ) , and count the number of lines in the output
Remove the regular files from the current directory tree that are newer than / tmp / date.start but not newer than / tmp / date.end
Search for ' foo ' in all the java files under ' dir1 ' , ' dir2 ' and ' dir3 ' directory tree and print only the names of the matched files
Sort and display the file name and creation month of top 11 files in the entire file system ( Sort in the order of month )
Assigns MAC address 00 : 80 : 48 : BA : d1 : 30 to interface eth0 .
this find command Substitute space with underscore in the file name replaces space in all the * .mp3 files with _
Print the most repeated line in " list2.txt " that exists in " list1.txt " prefixed by the number of occurrences
Find all files that contain the case insensitive regex ' stringtofind ' in maximum 1 level down the / directory without descending into other partitions
List all files and directories in long list format with a time style of " long-iso " and sort from oldest modifed to newest modified
Recursively change the owner to " $ USER " and group to " $ GROUP " of " / var / lib / cassandra "
Recursively change the owner to " $ { JBOSS _ USER } " of " $ JBOSS _ LOG _ DIR "
display all the regular files in current folder excluding all the directories and all the sub directories having " normal " in their name
Find all files that contain the case insensitive regex ' stringtofind ' in maximum 1 level down the / directory without descending into other partitions
Save a nginx link to " / path / to / file " with the current user and system FQDN host name in variable " path "
Change the ownership of " / etc / udev / rules.d / 51-android.rules " to " root "
display all the files in the folder / mp3-collection which are bigger than 10MB or which start with the name " Metallica "
Finds the folder where temporary files would be written to , and save path to it in a ' TMPDIR ' variable .
Remove files in current directory according to the filenames found in ~ / clang + llvm-3.3 / bin /
Search the current directory tree for files whose names begin with " my " and end with " p " followed by any character , ignoring path names containing " test "
set a crontab to create or update the timestamp of " washere2 " in the current directory every 30 minutes .
Recursively copy / path / foo on host " prod " to local directory " / home / user / Desktop " , connecting as ssh username corresponding to local username .
Removes files ~ / .android / adbkey and ~ / .android / adbkey.pub without prompting .
Create a compressed archive named ' my _ directory.tar.gz ' with files inside directory ' my _ directory ' without including the directory entry ' my _ directory ' itself
display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2
display all the files in the current folder excluding the file states _ to _ csv.pl and those that are present in the directories whose name starts with " .git "
Print a list of regular files from directory tree sort _ test / sorted with LC _ COLLATE = en _ US.utf8
Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding anything in ' * .pdf ' before it ' ss passed to find .
Compare * .csv files in the current directory tree with their analogs stored in / some / other / path / prompting before running ' diff '
Copy file in current directory of local host to host " remote " , connecting as ssh user matching current local username , and copying the file in home directory on remote host - enable compression during transfer .
Delete files under $ LOCATION that match $ REQUIRED _ FILES in their names and were modified more than 1 day ago
Print a list of regular files from directory tree sort _ test / sorted with LC _ COLLATE = en _ US.UTF-8
search for the word " foo " in all the regular / normal files with the name " file-pattern " in the directory " / path / to / dir "
split content all files file1 .. 40000 into pieces per 1445 lines named as outputprefixNNN as digital prefix
Copies $ { FILE } to COLLECT folder with unique name formatted like ' job _ XXXXXXXXX ' .
Prints only unique strings of those stored in variables $ COMMANDS and $ ALIASES .
Remount " yaffs2 " filesystem " / dev / block / mtdblk4 " to " / system " as read and write only
Search for the case insensitive regex ' STRING _ TO _ SEARCH _ FOR ' in all files under current directory
Print nothing because ' MYVAR ' string doesn ' t match with ' / [ ^ / ] + : ' pattern
Prints string " 0 1 * * * / root / test.sh " to the terminal , and append it to file ' / var / spool / cron / root '
Compresses with compression level 9 all files under the current folder but already compressed ' * .bz2 ' files , performing in background .
Count the number of files in the / usr / ports directory tree whose names begin with ' pkg-plist ' and which contain ' dirrmtry '
Go to directory / cygdrive / c / Program Files ( x86 ) using quotes to escape special characters
Archive preserving permissions and ownership files in " / var / www / " on host " user @ 10.1.1.2 " to local " / var / www / "
change the extension of all the " .abc " files in the folder " / the / path " to " .edefg " and do not change in the sub directories
display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2
Force create a symbolc link named " softlink _ name " to " source _ file _ or _ directory _ name " without dereferencing " softlink _ name "
Read a line from standard input into variable " message " with escaped prompt " Please Enter a Message : \ n \ b "
Split " domains.xml " into files of at most 50000 lines each with a numeric suffix of length 4 and prefix of " domains _ "
Find all files in current directory that were modified less than 1 day ago excluding hidden files and archive them and put the output into the variable file _ changed
Gets MAC address of p2p0 network interface .
Recursively copy all files with names ending with .txt from dir _ 1 to the same location within copy _ of _ dir _ 1
Copy all files ( not directories ) in " / path / to / local / storage " to " / path / to / copy " on host " remote.host " authenticating as user " user "
Finds strings with dot-separated sequence of numbers , and prints part of that sequence before the first dot .
Go to directory / cygdrive / c / Program Files ( x86 ) using backslashes to escape special characters
Recursively from current folder searches only files that names match " . * xxx " pattern , ignores binary files and prints file name before every string that contains " my Text to grep " .
Compresses all files in the directory ' PATH _ TO _ FOLDER ' without recursion and keeps uncompressed files from deletion .
Find .cpp files that differs in subdirectories PATH1 and PATH2 .
Print differences between the sorted content of file $ 1 and file $ 2 , executing ' diff ' with options from " $ { @ : 3 } " array slice
Find all files in the current directory recursively with " linkin park " in their names and copy them to / Users / tommye / Desktop / LP
Isolate first comma-delimited field of each line in " file " , discard consecutive duplicates , and search " file " for first matching occurrence of that field .
change the word " GHBAG " to " stream-agg " in all the file names in current folder which have the word " -GHBAG- " in their name
create symbolic links in directory " / usr / local / symlinks " to all files located in directiry " incoming " and that have been modified earlier then 5 days and owned by user " nr "
Finds strings with dot-separated sequence of numbers , and prints part of that sequence between the first and second dot .
Print the text file paths that match ' needle text ' in their contents under ' my _ folder ' recursively
Archive all files beginning with .env or .bash in current directory to user ' s home directory on host " app1 " , preserving timestamps and skipping files that are newer on " app1 "
Find all directories under ' project ' directory without going into subdirectories that do not match the POSIX egrep regex $ PATTERN in their paths and are not empty
Mount partition with label " WHITE " on " / mnt / WHITE " with read and write permission and have it accessible by user and group " test "
Archive all files ( not directories ) in " folder1 " to " copy _ of _ folder1 " specifying to include files info.txt and data.zip
Finds strings with dot-separated sequence of numbers , and prints part of that sequence before the second and third dot .
Connect to host " $ { HOSTNAME } " as user " $ { USERNAME } " and execute " $ { SCRIPT } " non-interactively
Finds recursively all files in ' / path / ' excluding folders dir1 , dir2 and all like * .dst , that contain ' pattern ' , and prints matched strings with string number and file name .
Replace all sequence of ' blank ' characters in file ' log ' with a single occurence of such symbol and print space-separated fields of each string but first two fields
Move all * .pdf.marker files and their corresponding * .pdf files under $ { INPUT } to $ { OUTPUT }
Search for the regex $ greppattern in all files with ' .c ' or ' .h ' extension under $ searchpath with name pattern $ filepat and show the matched line numbers , file names and matched lines
Create a rsa key with comment specified by variable APP and passphrase specified y SSHKEYPASS .
Create a symbolic link named " / usr / bin / my-editor " to " / usr / share / my-editor / my-editor-executable " and attemp to hard link directories
Print a randomly sorted list of numbers from 1 to 10 to file " / tmp / lst " and outputs " ------- " followed by the reverse list to the screen
Archive " / path / to / files " on host " remotemachine " authentifying as user " user " and compressing data during transmission , copy symlinks as symlinks .
Calculate md5 checksum of $ KEY , take the 1st to 10th character , append them with the string ' / tmp / command _ cache . ' and save the rsultant string to variable FILE
Find all files under $ source _ dir that match the regex . * \ . \ ( avi \ | wmv \ | flv \ | mp4 \ ) in their paths and print them with null character as the delimiter
( GNU specific ) Set variable LINE to full process info of process currently taking the most CPU time , squeezing multiple consecutive spaces into one .
Archive all files specified on standard input under " / path / to / files " to " / path " on host " targethost " as user " user " with escalated privileges
Find all * .epub , * .mobi , * .chm , * .rtf , * .lit and * .djvu files / directories under current directory
Compress all files in directory " $ PATH _ TO _ LOGS " that were last modified more than " $ SOME _ NUMBER _ OF _ DAYS " days ago
create a symbolic link with absolute path " / cygdrive / c / Program Files " to file " / cygdrive / c / ProgramFiles "
List all IPV4 addresses found in all files under / etc directory
search for the file " job.history " in the folder / data / Spoolln and search for multiple patterns in the file and display the count of matched lines along with the pattern
Print first 11 characters from $ line , print a tab , print the md5 sum of the file specified by the 13th and onward characters from $ line and print a null character at end without a trailing new line
Reformat date " Sat Aug 09 13 : 37 : 14 2014 + 1100 " according to format string " % a % b % d % H : % M : % S % Y % z "
Copy " * .cc " , " * .h " , and " SConstruct " to " rsync : / / localhost : 40001 / bledge _ ce " using blocking IO
Create a symbolic link named " ~ / bin / subl " to " / Applications / Sublime Text.app / Contents / SharedSupport / bin / subl "
Filter out current date in current time zone from the GMT + 30 and GMT + 20 representations of current date and show the last one
Set the bash environmental variable " PROMPT _ COMMAND " to save the output of the last executed command to variable " LAST " and file ' / tmp / x "
Create a symolic link in " / usr / local / bin / " to " / Applications / Sublime \ Text.app / Contents / SharedSupport / bin / subl "
download file " https : / / raw.githubusercontent.com / creationix / nvm / v0.31.0 / install.sh " and execute it
find all the files in the file system which hae set uid enabled and save them to / root / suid.txt and those which have size greater than 100MB save them to / root / big.txt
Create a symbolic link named " / usr / local / bin / subl " to " / Applications / Sublime Text 2.app / Contents / SharedSupport / bin / subl "
display all files in the entire file system excluding the directories / proc , / sys , / dev and those files which are writable and which are not symbolic links and which are not sockets and which do not have the sticky bit set
Recursively copy local file / directory " / copy / from / path " to remote location " / copy / to / path " on host " server " , connecting as ssh user " user " and using identity key file " / path / to / your / .pemkey " instead of the default in ~ / .ssh /
Find all files under $ { searchpath } that match the regex ' " $ { string1 } " . * " $ { string2 } " . * " $ { string3 } " ' ( $ { string1 } ... won ' t be expanded ) in their contents
Archive " / path / to / copy " on host " remote.host " as user " user " to " / path / to / local / storage " updating files with different checksums , showing human readable progress and statistics , and compressing data during transmission
Attempt to connect as root via ssh to host whose IP address or hostname is specified by environment variable IPADDRESS - this will normally fail because ssh servers normally don ' t accept root logins .
Print " deb-src http : / / ppa.launchpad.net / webupd8team / java / ubuntu precise main " and append to file " / etc / apt / sources.list "
Forward port 16186 on hello.com to 8888 on localhost using private key " privatekeystuffdis88s8dsf8h8hsd8fh8d " for login
Move each of the directories in / path / to / folders / * to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all * .emlx files into this directory
Archive " / media / Incoming / music / " to " / media / 10001 / music / " on host " server " and skip files that are newer in the destination , delete any files in the destination not in the source , and compress data during transmission
Reports count of characters in the value of $ { FOO _ NO _ LEAD _ SPACE } variable as follows : " length ( FOO _ NO _ LEAD _ SPACE ) = = < counted number of characters > "
